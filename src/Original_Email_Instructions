Code challenge

Chris Moses <Chris.Moses@sds.io>
To:devonmcb@yahoo.com
Aug 31 at 11:57 AM

Devon,



Thanks for speaking with me.  Feel free to complete the code challenge below and get it back to me on your time.



Thanks,



Subject: SDS programming challenge

Hi and welcome to the Inn. As you know, we are a small inn with a prime location in a prominent city ran by a friendly
innkeeper named Allison. We also buy and sell only the finest goods. Unfortunately, our goods are constantly degrading
in quality as they approach their sell by date. We have a system in place that updates our inventory for us. It was
developed by a no-nonsense guy named Paul, who has moved on to new adventures. Your task is to add the new feature to
our system so that we can begin selling a new category of items. First an introduction to our system:

         - All items have a SellIn value which denotes the number of days we have to sell the item

        - All items have a Quality value which denotes how valuable the item is

        - At the end of each day our system lowers both values for every item

 Pretty simple, right? Well this is where it gets interesting:

         - Once the sell by date has passed, Quality degrades twice as fast

        - The Quality of an item is never negative

        - "Aged Brie" actually increases in Quality the older it gets

        - The Quality of an item is never more than 50

        - "Sulfuras", being a legendary item, never has to be sold or decreases in Quality

        - "Backstage passes", like aged brie, increases in Quality as it's SellIn value approaches; Quality increases
        by 2 when there are 10 days or less and by 3 when there are 5 days or less but Quality drops to 0 after the
        concert

 We have recently signed a supplier of conjured items. This requires an update to our system:



        - "Conjured" items degrade in Quality twice as fast as normal items

 Feel free to make any changes to the UpdateQuality method and add any new code as long as everything still works
 correctly. However, do not alter the Item class or Items property as those belong to another team that doesnâ€™t believe
 in shared code ownership (you can make the UpdateQuality method and Items property static if you like, we'll cover for
 you).



Just for clarification, an item can never have its Quality increase above 50, however "Sulfuras" is a legendary item
and as such its Quality is 80 and it never alters.



 PLEASE RETURN ALL OF THE FILES THAT YOU CREATE. FEEL FREE TO ZIP THE ENTIRE SOLUTION AND RETURN IT TO US.

void UpdateQuality()
{

    for (var i = 0; i < Items.Count; i++)

    {

        if (Items[i].Name != "Aged Brie" && Items[i].Name != "Backstage passes to a TAFKAL80ETC concert")

        {

            if (Items[i].Quality > 0)

            {

                if (Items[i].Name != "Sulfuras, Hand of Ragnaros")

                {

                    Items[i].Quality = Items[i].Quality - 1;

                }

            }

        }

        else

        {

            if (Items[i].Quality < 50)

            {

                Items[i].Quality = Items[i].Quality + 1;



                if (Items[i].Name == "Backstage passes to a TAFKAL80ETC concert")

                {

                    if (Items[i].SellIn < 11)

                    {

                        if (Items[i].Quality < 50)

                        {

                            Items[i].Quality = Items[i].Quality + 1;

                        }

                    }



                    if (Items[i].SellIn < 6)

                    {

                        if (Items[i].Quality < 50)

                        {

                            Items[i].Quality = Items[i].Quality + 1;

                        }

                    }

                }

            }

        }


        if (Items[i].Name != "Sulfuras, Hand of Ragnaros")

        {

            Items[i].SellIn = Items[i].SellIn - 1;

        }



        if (Items[i].SellIn < 0)

        {

            if (Items[i].Name != "Aged Brie")

            {

                if (Items[i].Name != "Backstage passes to a TAFKAL80ETC concert")

                {

                    if (Items[i].Quality > 0)

                    {

                        if (Items[i].Name != "Sulfuras, Hand of Ragnaros")

                        {

                            Items[i].Quality = Items[i].Quality - 1;

                        }

                    }

                }

                else

               {

                        // strange: why not setQuality(0) ?
                        Items[i].Quality = Items[i].Quality - Items[i].Quality;

                }

            }

            else

            {
                // this appears to be a bug: this has Aged Brie increase in quality
                // twice as fast as normal when it becocmes sellin lt zero && lt 50
                if (Items[i].Quality < 50)

               {

                    Items[i].Quality = Items[i].Quality + 1;

                }

            }

        }

    }

}



IList<Item> Items = new List<Item>

   {

        new Item { Name = "+5 Dexterity Vest", SellIn = 10, Quality = 20 },

        new Item { Name = "Aged Brie", SellIn = 2, Quality = 0 },

        new Item { Name = "Elixir of the Mongoose", SellIn = 5, Quality = 7 },

        new Item { Name = "Sulfuras, Hand of Ragnaros", SellIn = 0, Quality = 80 },

        new Item { Name = "Backstage passes to a TAFKAL80ETC concert", SellIn = 15, Quality = 20 },

        new Item { Name = "Conjured Mana Cake", SellIn = 3, Quality = 6 }

    };



class com.d3von.Item
{
    private String name;
    private int sellIn;
    private int quality;

    //public string Name { get; set; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    //public int SellIn { get; set; }
    public int getSellIn() { return sellIn; }
    public void setSellIn(String sellIn) { this.sellIn = sellIn; }

    //public int Quality { get; set; }
    public int getQuality() { return quality; }
    public void setQuality(int quality) { this.quality = quality; }

}


        string myName = "Baka";
        Item_orig myItem;
        myItem.Name = myName;
        myItem.Quality = -1000;

        Item_orig yourItem = new Item_orig { Name = "Grisha", SellIn = 8 };
        yourItem.Quality = myItem.Quality + 2000;
        Console.WriteLine(myItem.Name + " " + yourItem.Quality);




        class Item_traditional
        {
            private string name;
            public string Name
            {
             get
             {
               return this.name; // string n = item.Name; is the same as string n = item.getName();

             }
             set
             {
             this.name = value; // string n; item.Name = n; is the same as string n; item.setName(n);
             }
            }


            private int sellIn;
            public int SellIn
            {
             get
             {
               return this.sellIn;
             }
             set
             {
             this.sellIn = value;
             }
            }


            private int quality;
            public int Quality
            {
             get
             {
               return this.quality;
             }
             set
             {
                this.quality = value;
             }
            }

        }





Chris Moses

Director of Corporate Recruiting

937-886-9405 X105  Office

513-205-2774  Mobile

937-886-9407  Fax



id:image001.png@01D2BDC6.98AF5F50

Custom development. Better results.

www.sds.io


******************************************************** THIS MESSAGE IS CONFIDENTIAL. Strategic Data Systems is moving, Tuesday, August 29, 2017. Our new office is located at 11206 Chester Road, Suite 405, Cincinnati, OH 45246. The new phone number is 513-772-SDSI or 513-772-7374. This e-mail message and any attachments are proprietary and confidential information of Strategic Data Systems, Inc., and intended only for the use of the recipient(s) named above. If you are not the intended recipient, you may not print, distribute, or copy this message or any attachments. If you have received this communication in error, please notify the sender by return e-mail and delete this message and any attachments from your computer. ********************************************************
